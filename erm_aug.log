Training a feature extractor using erm on <class 'datasets.domainbed.PACS'> with domain art_painting held out.
Training a feature extractor.
Save dir: ./results/PACS/omit_art_painting/erm_augmented/trial_0
Constructor kwargs: {'dataset_constructor': <class 'datasets.domainbed.PACS'>, 'device': 'cuda:3', 'dataset_kwargs': {'domains_to_use': ['cartoon', 'photo', 'sketch'], 'data_transform': Compose(
    RandomResizedCrop(size=(224, 224), scale=(0.7, 1.0), ratio=(0.75, 1.3333), interpolation=bilinear)
    RandomHorizontalFlip(p=0.5)
    ColorJitter(brightness=[0.7, 1.3], contrast=[0.7, 1.3], saturation=[0.7, 1.3], hue=[-0.3, 0.3])
    RandomGrayscale(p=0.1)
    ToTensor()
    Lambda()
    Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
)}, 'dataloader_kwargs': {'batch_size': 32, 'num_workers': 10}, 'model_constructor': <class 'models.resnet.PretrainedRN50'>, 'model_kwargs': {'pretrained': False}, 'optimizer_constructor': <class 'torch.optim.adam.Adam'>, 'optimizer_kwargs': {'lr': 0.001, 'weight_decay': 0.0001}, 'loss_fn_constructor': <class 'torch.nn.modules.loss.CrossEntropyLoss'>, 'loss_fn_kwargs': {}}
Training a feature extractor using erm on <class 'datasets.domainbed.PACS'> with domain cartoon held out.
Training a feature extractor.
Save dir: ./results/PACS/omit_cartoon/erm_augmented/trial_0
Constructor kwargs: {'dataset_constructor': <class 'datasets.domainbed.PACS'>, 'device': 'cuda:3', 'dataset_kwargs': {'domains_to_use': ['art_painting', 'photo', 'sketch'], 'data_transform': Compose(
    RandomResizedCrop(size=(224, 224), scale=(0.7, 1.0), ratio=(0.75, 1.3333), interpolation=bilinear)
    RandomHorizontalFlip(p=0.5)
    ColorJitter(brightness=[0.7, 1.3], contrast=[0.7, 1.3], saturation=[0.7, 1.3], hue=[-0.3, 0.3])
    RandomGrayscale(p=0.1)
    ToTensor()
    Lambda()
    Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
)}, 'dataloader_kwargs': {'batch_size': 32, 'num_workers': 10}, 'model_constructor': <class 'models.resnet.PretrainedRN50'>, 'model_kwargs': {'pretrained': False}, 'optimizer_constructor': <class 'torch.optim.adam.Adam'>, 'optimizer_kwargs': {'lr': 0.001, 'weight_decay': 0.0001}, 'loss_fn_constructor': <class 'torch.nn.modules.loss.CrossEntropyLoss'>, 'loss_fn_kwargs': {}}
Training a feature extractor using erm on <class 'datasets.domainbed.PACS'> with domain photo held out.
Training a feature extractor.
Save dir: ./results/PACS/omit_photo/erm_augmented/trial_0
Constructor kwargs: {'dataset_constructor': <class 'datasets.domainbed.PACS'>, 'device': 'cuda:3', 'dataset_kwargs': {'domains_to_use': ['art_painting', 'cartoon', 'sketch'], 'data_transform': Compose(
    RandomResizedCrop(size=(224, 224), scale=(0.7, 1.0), ratio=(0.75, 1.3333), interpolation=bilinear)
    RandomHorizontalFlip(p=0.5)
    ColorJitter(brightness=[0.7, 1.3], contrast=[0.7, 1.3], saturation=[0.7, 1.3], hue=[-0.3, 0.3])
    RandomGrayscale(p=0.1)
    ToTensor()
    Lambda()
    Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
)}, 'dataloader_kwargs': {'batch_size': 32, 'num_workers': 10}, 'model_constructor': <class 'models.resnet.PretrainedRN50'>, 'model_kwargs': {'pretrained': False}, 'optimizer_constructor': <class 'torch.optim.adam.Adam'>, 'optimizer_kwargs': {'lr': 0.001, 'weight_decay': 0.0001}, 'loss_fn_constructor': <class 'torch.nn.modules.loss.CrossEntropyLoss'>, 'loss_fn_kwargs': {}}
Training a feature extractor using erm on <class 'datasets.domainbed.PACS'> with domain sketch held out.
Training a feature extractor.
Save dir: ./results/PACS/omit_sketch/erm_augmented/trial_0
Constructor kwargs: {'dataset_constructor': <class 'datasets.domainbed.PACS'>, 'device': 'cuda:3', 'dataset_kwargs': {'domains_to_use': ['art_painting', 'cartoon', 'photo'], 'data_transform': Compose(
    RandomResizedCrop(size=(224, 224), scale=(0.7, 1.0), ratio=(0.75, 1.3333), interpolation=bilinear)
    RandomHorizontalFlip(p=0.5)
    ColorJitter(brightness=[0.7, 1.3], contrast=[0.7, 1.3], saturation=[0.7, 1.3], hue=[-0.3, 0.3])
    RandomGrayscale(p=0.1)
    ToTensor()
    Lambda()
    Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
)}, 'dataloader_kwargs': {'batch_size': 32, 'num_workers': 10}, 'model_constructor': <class 'models.resnet.PretrainedRN50'>, 'model_kwargs': {'pretrained': False}, 'optimizer_constructor': <class 'torch.optim.adam.Adam'>, 'optimizer_kwargs': {'lr': 0.001, 'weight_decay': 0.0001}, 'loss_fn_constructor': <class 'torch.nn.modules.loss.CrossEntropyLoss'>, 'loss_fn_kwargs': {}}
